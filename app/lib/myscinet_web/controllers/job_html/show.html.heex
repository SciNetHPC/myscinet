<% {cluster, cjobid} = split_jobid(@job.jobid) %>
<% perf_csv_path = ~p"/jobs/#{cluster}/#{cjobid}/perf.csv" %>

<.header>
  <span title={@job.state}>
    <.job_state_icon state={@job.state} class="size-8" />
  </span>
  <span class="inline-block align-middle">
    <%= "#{gettext "Job"} #{cluster}/#{cjobid}" %>:
    <%= add_underscore_breaks @job.jobname %>
  </span>
</.header>

<div class="tabs tabs-border">
  <input type="radio" name="job_tabs" class="tab" aria-label={gettext "Details"} />
  <div class="tab-content">
    <div class="card bg-base-200 shadow-md">
      <div class="card-body">
        <style>
          dt {
            font-weight: bold;
            text-align: right;
          }
        </style>
        <dl class="grid grid-cols-[auto_1fr] gap-x-4">
          <dt><%= gettext "State" %>:</dt><dd><%= @job.state %></dd>
          <dt><%= gettext "User" %>:</dt><dd><%= @job.username %></dd>
          <dt><%= gettext "Group" %>:</dt><dd><%= @job.groupname %></dd>
          <dt><%= gettext "Account" %>:</dt><dd><%= @job.account %></dd>
          <dt><%= gettext "Partition" %>:</dt><dd><%= @job.partition %></dd>
          <dt><%= gettext "QOS" %>:</dt><dd><%= @job.qos %></dd>
          <dt><%= gettext "Workdir" %>:</dt><dd><%= @job.workdir %></dd>
          <dt><%= gettext "Time Limit" %>:</dt><dd><%= @job.timelimit %></dd>
          <dt><%= gettext "Elapsed" %>:</dt><dd><%= @job.elapsed %></dd>
          <dt><%= gettext "CPU Time" %>:</dt><dd><%= @job.cputime %></dd>
          <dt><%= gettext "Nodes" %>:</dt><dd><%= @job.nnodes %></dd>
          <dt><%= gettext "Node List" %>:</dt><dd><%= @job.nodelist %></dd>
          <dt><%= gettext "Alloc TRES" %>:</dt><dd><%= @job.alloctres %></dd>
          <dt><%= gettext "Submit Time" %>:</dt><dd><%= @job.submit %></dd>
          <dt><%= gettext "Eligible Time" %>:</dt><dd><%= @job.eligible %></dd>
          <dt><%= gettext "Start Time" %>:</dt><dd><%= @job.start %></dd>
          <%= if @job.state != "RUNNING" do %>
            <dt><%= gettext "End Time" %>:</dt><dd><%= @job.endtime %></dd>
            <dt><%= gettext "Exit Code" %>:</dt><dd><%= @job.exitcode %></dd>
            <dt><%= gettext "Max Disk Read" %>:</dt><dd><%= @job.maxdiskread %></dd>
            <dt><%= gettext "Max Disk Write" %>:</dt><dd><%= @job.maxdiskwrite %></dd>
            <dt><%= gettext "Max RSS" %>:</dt><dd><%= @job.maxrss %></dd>
            <dt><%= gettext "Max VM Size" %>:</dt><dd><%= @job.maxvmsize %></dd>
            <dt><%= gettext "Total CPU" %>:</dt><dd><%= @job.totalcpu %></dd>
            <dt><%= gettext "User CPU" %>:</dt><dd><%= @job.usercpu %></dd>
            <dt><%= gettext "System CPU" %>:</dt><dd><%= @job.systemcpu %></dd>
          <% end %>
        </dl>
      </div>
    </div>
  </div>

  <input type="radio" name="job_tabs" class="tab" aria-label={gettext "Performance"} checked />
  <div class="tab-content">
    <div class="card bg-base-200 shadow-md">
      <div class="card-body">
        <div id="plots-spinner" class="flex justify-center items-center h-48">
          <span class="loading loading-spinner loading-lg text-primary"></span>
        </div>
        <div id="plots-container"></div>
        <div id="download-button" class="flex justify-end" hidden>
          <a href={perf_csv_path} download class="btn btn-sm btn-outline btn-primary">
            <%= gettext "Download CSV" %>
          </a>
        </div>
      </div>
    </div>
  </div>

  <%= if @script do %>
    <input type="radio" name="job_tabs" class="tab" aria-label={gettext "Script"} />
    <div class="tab-content">
      <div class="card bg-base-200 shadow-md">
        <div class="card-body">
        <%= if @command do %>
          <pre class="text-base-content/60"><%= "$ #{@command}" %></pre>
          <hr class="-mx-6 border-base-300 my-2" />
        <% end %>
          <pre class="whitespace-pre-wrap overflow-x-auto"><code class="language-bash"><%= @script %></code></pre>
        </div>
      </div>
    </div>
  <% end %>

  <%= if @env do %>
    <input type="radio" name="job_tabs" class="tab" aria-label={gettext "Environment"} />
    <div class="tab-content">
      <div class="card bg-base-200 shadow-md">
        <div class="card-body">
          <pre class="whitespace-pre-wrap overflow-x-auto"><%= @env %></pre>
        </div>
      </div>
    </div>
  <% end %>
</div>

<script type="module">
  import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
  import * as Plot from "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm";
  const plots = [
    {
      id: "cpu-plot",
      label: "CPU Usage [%]",
      y: d => d.cpupercent,
      range: [0, 100]
    },
    {
      id: "fp64-plot",
      label: "FP64 Utilization",
      y: d => d.dcgm_fi_prof_pipe_fp64_active,
      range: [0, 100]
    }
  ];
  const csvUrl = "<%= raw perf_csv_path %>";

  d3.csv(csvUrl, d3.autoType)
    .finally(() => {
      document.getElementById("plots-spinner").remove();
    })
    .then(data => {
      const plotsContainer = document.getElementById("plots-container");
      if (data == null || data.length == 0) {
        plotsContainer.innerHTML = '<div class="text-center text-base-content/60 py-12">No performance data.</div>';
        return;
      }
      for (const plot of plots) {
        if (!data.some(d => plot.y(d) !== undefined && plot.y(d) !== null)) continue;
        // Create container for each plot
        const plotDiv = document.createElement("div");
        plotDiv.className = "mb-6";
        plotDiv.id = plot.id;
        // Add label
        const label = document.createElement("h2");
        label.className = "text-base font-normal font-mono card-title";
        label.textContent = plot.label;
        plotDiv.appendChild(label);
        plotsContainer.appendChild(plotDiv);
        // Render plot
        const p = Plot.plot({
          x: {
            nice: true,
            type: "time",
          },
          y: {
            domain: plot.range,
            nice: true,
          },
          color: {
            label: "Node",
            type: "categorical",
          },
          grid: true,
          marks: [
            Plot.frame(),
            Plot.line(data, {x: "time", y: plot.y, stroke: "nodename"}),
          ],
          width: plotDiv.clientWidth || 600,
          height: 240,
          marginLeft: 50,
          marginBottom: 40
        });
        plotDiv.appendChild(p);
      }
      document.getElementById("download-button").removeAttribute("hidden");
    })
    .catch(error => {
      const plotsContainer = document.getElementById("plots-container");
      plotsContainer.innerHTML = '<div class="text-center text-error-content py-12">Error loading performance data.</div>';
      console.error("Error loading CSV:", error);
    });
</script>

<!-- Prism.js for syntax highlighting -->
<script src="https://cdn.jsdelivr.net/npm/prismjs@1/components/prism-core.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/prismjs@1/components/prism-bash.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/prismjs@1/plugins/autoloader/prism-autoloader.min.js"></script>
