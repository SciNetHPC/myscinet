<% {cluster, cjobid} = split_jobid(@job.jobid) %>
<% cpumem = cluster_cpumem(cluster) %>
<% perf_csv_path = ~p"/jobs/#{cluster}/#{cjobid}/perf.csv" %>

<.header>
  <span title={@job.state} aria-hidden="true">
    <.job_state_icon state={@job.state} class="size-8" />
  </span>
  <span class="inline-block align-middle">
    <%= "#{gettext "Job"} #{cluster}/#{cjobid}" %>:
    <%= add_underscore_breaks @job.jobname %>
  </span>
</.header>

<div class="tabs tabs-border">
  <input type="radio" name="job_tabs" class="tab" aria-label={gettext "Details"} />
  <div class="tab-content">
    <div class="card bg-base-200 shadow-md">
      <div class="card-body">
        <style>
          dt {
            font-weight: bold;
            text-align: right;
          }
        </style>
        <dl class="grid grid-cols-[auto_1fr] gap-x-4">
          <dt><%= gettext "State" %>:</dt><dd><%= @job.state %></dd>
          <dt><%= gettext "User" %>:</dt><dd><%= @job.username %></dd>
          <dt><%= gettext "Group" %>:</dt><dd><%= @job.groupname %></dd>
          <dt><%= gettext "Account" %>:</dt><dd><%= @job.account %></dd>
          <dt><%= gettext "Partition" %>:</dt><dd><%= @job.partition %></dd>
          <dt><%= gettext "QOS" %>:</dt><dd><%= @job.qos %></dd>
          <dt><%= gettext "Workdir" %>:</dt><dd><%= @job.workdir %></dd>
          <dt><%= gettext "Time Limit" %>:</dt><dd><%= @job.timelimit %></dd>
          <dt><%= gettext "Elapsed" %>:</dt><dd><%= @job.elapsed %></dd>
          <dt><%= gettext "CPU Time" %>:</dt><dd><%= @job.cputime %></dd>
          <dt><%= gettext "Nodes" %>:</dt><dd><%= @job.nnodes %></dd>
          <dt><%= gettext "Node List" %>:</dt><dd><%= @job.nodelist %></dd>
          <dt><%= gettext "Alloc TRES" %>:</dt><dd><%= @job.alloctres %></dd>
          <dt><%= gettext "Submit Time" %>:</dt><dd><%= @job.submit %></dd>
          <dt><%= gettext "Eligible Time" %>:</dt><dd><%= @job.eligible %></dd>
          <dt><%= gettext "Start Time" %>:</dt><dd><%= @job.start %></dd>
          <%= if @job.state != "RUNNING" do %>
            <dt><%= gettext "End Time" %>:</dt><dd><%= @job.endtime %></dd>
            <dt><%= gettext "Exit Code" %>:</dt><dd><%= @job.exitcode %></dd>
            <dt><%= gettext "Max Disk Read" %>:</dt><dd><%= @job.maxdiskread %></dd>
            <dt><%= gettext "Max Disk Write" %>:</dt><dd><%= @job.maxdiskwrite %></dd>
            <dt><%= gettext "Max RSS" %>:</dt><dd><%= @job.maxrss %></dd>
            <dt><%= gettext "Max VM Size" %>:</dt><dd><%= @job.maxvmsize %></dd>
            <dt><%= gettext "Total CPU" %>:</dt><dd><%= @job.totalcpu %></dd>
            <dt><%= gettext "User CPU" %>:</dt><dd><%= @job.usercpu %></dd>
            <dt><%= gettext "System CPU" %>:</dt><dd><%= @job.systemcpu %></dd>
          <% end %>
        </dl>
      </div>
    </div>
  </div>

  <input type="radio" name="job_tabs" class="tab" aria-label={gettext "Performance"} checked />
  <div class="tab-content">
    <div class="card bg-base-200 shadow-md">
      <div class="card-body">
        <div id="plots-spinner" class="flex justify-center items-center h-48">
          <span class="loading loading-spinner loading-lg text-primary"></span>
        </div>
        <div id="plots-container"></div>
        <div id="download-button" class="flex justify-end" hidden>
          <a href={perf_csv_path} download class="btn btn-sm btn-outline btn-primary">
            <.icon name="hero-arrow-down-tray" class="size-4 inline-block" />
            <%= gettext "Download CSV" %>
          </a>
        </div>
      </div>
    </div>
  </div>

  <%= if @script do %>
    <input type="radio" name="job_tabs" class="tab" aria-label={gettext "Script"} />
    <div class="tab-content">
      <div class="card bg-base-200 shadow-md">
        <div class="card-body">
        <%= if @command do %>
          <pre class="text-base-content/60"><%= "$ #{@command}" %></pre>
          <hr class="-mx-6 border-base-300 my-2" />
        <% end %>
          <pre class="whitespace-pre-wrap overflow-x-auto"><code class="language-bash"><%= @script %></code></pre>
        </div>
      </div>
    </div>
  <% end %>

  <%= if @env do %>
    <input type="radio" name="job_tabs" class="tab" aria-label={gettext "Environment"} />
    <div class="tab-content">
      <div class="card bg-base-200 shadow-md">
        <div class="card-body">
          <pre class="whitespace-pre-wrap overflow-x-auto"><%= @env %></pre>
        </div>
      </div>
    </div>
  <% end %>
</div>

<script type="module">
  import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
  import * as Plot from "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm";
  const nodegpu = d => d.nodename + ":" + d.gpu
  const plots = [
    {
      id: "gpu-usage-util",
      label: "<%= gettext "GPU Usage [%]" %>",
      y: d => 100*d.dcgm_fi_prof_gr_engine_active,
      z: nodegpu,
      range: [0, 100],
      when: "gpu"
    },
    {
      id: "cpu-usage-plot",
      label: "<%= gettext "CPU Usage [%]" %>",
      y: d => d.cpupercent,
      z: "nodename",
      range: [0, 100],
      when: "all"
    },
    {
      id: "cpu-iowait-plot",
      label: "<%= gettext "CPU IO Wait [ms]" %>",
      y: d => d.iowait,
      z: "nodename",
      range: [0, 1000],
      when: "cpu"
    },
    {
      id: "cpu-loadavg-plot",
      label: "<%= gettext "CPU Load Average" %>",
      y: d => d.loadavg,
      z: "nodename",
      range: [0, 200],
      when: "cpu"
    },
    {
      id: "cpu-mem-plot",
      label: "<%= gettext "CPU Memory Available [GiB]" %>",
      y: d => (d.memfree + d.buffers + d.cached)/1024,
      z: "nodename",
      range: [0, <%= cpumem %>],
      when: "all"
    },
    {
      id: "cpu-freq-plot",
      label: "<%= gettext "CPU frequency [GHz]" %>",
      y: d => d.freq,
      z: "nodename",
      range: [2, 4],
      when: "cpu"
    },
    {
      id: "cpu-cpi-plot",
      label: "<%= gettext "CPU cycles per instruction" %>",
      y: d => d.cpi,
      z: "nodename",
      range: [0, 10],
      when: "cpu"
    },
    {
      id: "cpu-power-plot",
      label: "<%= gettext "CPU power [W]" %>",
      y: d => d.powerl3,
      z: "nodename",
      range: [500, 1500],
      when: "cpu"
    },
    {
      id: "cpu-dflops-plot",
      label: "<%= gettext "Double-precision floating point operations [TFLOP/s]" %>",
      y: d => d.mflops*1e-6,
      z: "nodename",
      range: [0, 1],
      when: "cpu"
    },
    {
      id: "cpu-sflops-plot",
      label: "<%= gettext "Single-precision floating point operations [TFLOP/s]" %>",
      y: d => d.smflops*1e-6,
      z: "nodename",
      range: [0, 1],
      when: "cpu"
    },
    {
      id: "cpu-memread-plot",
      label: "<%= gettext "Memory read bandwidth [GiB/s]" %>",
      y: d => d.memread/1024,
      z: "nodename",
      range: [0, 10],
      when: "cpu"
    },
    {
      id: "cpu-memwrite-plot",
      label: "<%= gettext "Memory write bandwidth [GiB/s]" %>",
      y: d => d.memwrite/1024,
      z: "nodename",
      range: [0, 10],
      when: "cpu"
    },
    {
      id: "gpu-fp64-plot",
      label: "<%= gettext "GPU FP64 Usage" %>",
      y: d => 100*d.dcgm_fi_prof_pipe_fp64_active,
      z: nodegpu,
      range: [0, 100],
      when: "gpu"
    },
    {
      id: "gpu-fp32-plot",
      label: "<%= gettext "GPU FP32 Usage" %>",
      y: d => 100*d.dcgm_fi_prof_pipe_fp32_active,
      z: nodegpu,
      range: [0, 100],
      when: "gpu"
    },
    {
      id: "gpu-fp16-plot",
      label: "<%= gettext "GPU FP16 Usage" %>",
      y: d => 100*d.dcgm_fi_prof_pipe_fp16_active,
      z: nodegpu,
      range: [0, 100],
      when: "gpu"
    },
    {
      id: "gpu-tensor-plot",
      label: "<%= gettext "GPU Tensor Usage" %>",
      y: d => 100*d.dcgm_fi_prof_pipe_tensor_active,
      z: nodegpu,
      range: [0, 100],
      when: "gpu"
    },
    {
      id: "gpu-smact-plot",
      label: "<%= gettext "GPU SM Active [%]" %>",
      y: d => 100*d.dcgm_fi_prof_sm_active,
      z: nodegpu,
      range: [0, 100],
      when: "gpu"
    },
    {
      id: "gpu-smocc-plot",
      label: "<%= gettext "GPU SM Occupancy [%]" %>",
      y: d => 100*d.dcgm_fi_prof_sm_occupancy,
      z: nodegpu,
      range: [0, 100],
      when: "gpu"
    },
    {
      id: "portxmitdata-plot",
      label: "<%= gettext "Infiniband data transmitted [GiB/s]" %>",
      y: d => d.portxmitdata*4/1024**3, // portxmitdata has units of 4 bytes
      z: "nodename",
      range: [0, 1],
      when: "cpu",
      counter: true
    },
    {
      id: "portrcvdata-plot",
      label: "<%= gettext "Infiniband data received [GiB/s]" %>",
      y: d => d.portrcvdata*4/1024**3, // portrcvdata has units of 4 bytes
      z: "nodename",
      range: [0, 1],
      when: "cpu",
      counter: true
    },
    {
      id: "portxmitpkts-plot",
      label: "<%= gettext "Infiniband packets transmitted [million/s]" %>",
      y: d => d.portxmitpkts*1e-6,
      z: "nodename",
      range: [0, 1],
      when: "cpu",
      counter: true
    },
    {
      id: "portrcvpkts-plot",
      label: "<%= gettext "Infiniband packets received [million/s]" %>",
      y: d => d.portrcvpkts*1e-6,
      z: "nodename",
      range: [0, 1],
      when: "cpu",
      counter: true
    },
  ];
  const csvUrl = "<%= raw perf_csv_path %>";

  d3.csv(csvUrl, d3.autoType)
    .finally(() => {
      document.getElementById("plots-spinner").remove();
    })
    .then(data => {
      const plotsContainer = document.getElementById("plots-container");
      if (data == null || data.length == 0) {
        plotsContainer.innerHTML = '<div class="text-center text-base-content/60 py-12">No performance data.</div>';
        return;
      }

      // the port* fields are counters, so diff to turn into rates
      var data_by_node = d3.group(data, d => d.nodename);
      var diff = [];
      const parseDate = d => d3.isoParse(d['time']);
      data_by_node.forEach(function(values, key) {
        values.sort(function(a,b) {
          return parseDate(a).getTime() - parseDate(b).getTime();
        });

        for (var i = 1; i < values.length; i++) {
          var a = values[i-1];
          var b = values[i];
          var atime = parseDate(a).getTime(),
              btime = parseDate(b).getTime();
          var scale = 1000/(btime - atime);

          var xd = b.portxmitdata - a.portxmitdata;
          var rd = b.portrcvdata - a.portrcvdata;
          var xp = b.portxmitpkts - a.portxmitpkts;
          var rp = b.portrcvpkts - a.portrcvpkts;
          if (xd < 0 ){ xd = NaN; }
          if (rd < 0 ){ rd = NaN; }
          if (xp < 0 ){ xp = NaN; }
          if (rp < 0 ){ rp = NaN; }

          diff.push({
            "nodename": key,
            "time": new Date((atime + btime)/2),
            "portxmitdata": xd*scale,
            "portrcvdata": rd*scale,
            "portxmitpkts": xp*scale,
            "portrcvpkts": rp*scale,
          });
        }
      });

      const hasGPUs = "gpu" in data[0];
      for (const plot of plots) {
        if (hasGPUs) {
          if (plot.when == "cpu") continue;
        } else {
          if (plot.when == "gpu") continue;
        };
        const plotdata = plot.counter ? diff : data;
        const [min, max] = d3.extent(plotdata, plot.y);
        let yrange = [
          Math.min(plot.range[0], min),
          Math.max(plot.range[1], max)
        ];
        // Create container for each plot
        const plotDiv = document.createElement("div");
        plotDiv.className = "mb-6";
        plotDiv.id = plot.id;
        // Add label
        const label = document.createElement("h2");
        label.className = "text-base font-normal font-mono card-title";
        label.textContent = plot.label;
        plotDiv.appendChild(label);
        plotsContainer.appendChild(plotDiv);
        // Render plot
        const p = Plot.plot({
          x: {
            nice: true,
            type: "time",
          },
          y: {
            domain: yrange,
            nice: true,
          },
          color: {
            type: "categorical",
          },
          grid: true,
          marks: [
            Plot.frame(),
            Plot.line(plotdata, {x: "time", y: plot.y, z: plot.z, title: plot.z, stroke: plot.z}),
          ],
          width: plotDiv.clientWidth || 600,
          height: 240,
          marginLeft: 50,
          marginBottom: 40
        });
        plotDiv.appendChild(p);
      }
      document.getElementById("download-button").removeAttribute("hidden");
    })
    .catch(error => {
      const plotsContainer = document.getElementById("plots-container");
      plotsContainer.innerHTML = '<div class="text-center text-error-content py-12"><%= gettext "Error loading performance data." %></div>';
      console.error("Error loading CSV:", error);
    });
</script>

<!-- Prism.js for syntax highlighting -->
<script src="https://cdn.jsdelivr.net/npm/prismjs@1/components/prism-core.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/prismjs@1/components/prism-bash.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/prismjs@1/plugins/autoloader/prism-autoloader.min.js"></script>
